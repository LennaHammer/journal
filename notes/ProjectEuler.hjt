<Treepad version 3.0>
dt=Text
<node>
ProjectEuler
0
Username: LennaHammer
Password: LennaHammer




<end node> 5P9i0s8y19Z
dt=Text
<node>
1..10
1
# 1 Multiples of 3 and 5

puts (1..1000).inject(0){|a,b|a+(b%3==0 || b%5==0 ? b : 0)}


# 2 Even Fibonacci numbers

sum = 0
a, b = 1,2
while b < 4_000_000
  sum += b if b%2==0
  a, b = b, a+b
end
puts sum


# 3 Largest prime factor

x = 600851475143
i = 2
while i < x
  if x%i==0
    x /= i
  else
    i += 1
  end
end
puts x


# 4 Largest palindrome product

y = 0
pred = ->(x){t=x.to_s;t.reverse==t}
(100..999).each{|i|(i..999).each{|j|if pred.(t=i*j) then y = [y,t].max end}}
puts y


# 5 Smallest multiple

!!!!!!!!!!!!!!!!!!!!!!

# 6 Sum square difference	

puts (1..100).inject(:+)**2-(1..100).inject(0){|a,b|a+b**2}

# 7 10001st prime	

ps = []
i = 2
while ps.size < 10_001
  ps << i unless ps.any?{|e|i%e==0}
  i += 1
end
puts ps.last


# 8 Largest product in a series

data = <<EOF.gsub("\n","").each_char.map(&:to_i)
...
EOF
y = 0
l = 13
for i in 0...(data.size-l+1)
  x = data[i,l].inject(:*)
  y = x if x>y
end
puts y


# 9 Special Pythagorean triplet	

def main
  for c in 1...1000
    for b in 1...c
      a = 1000 - b - c
      next unless a < b
      if a**2 + b**2 == c**2
        puts a*b*c
        return
      end
    end
  end
end
main


# 10 Summation of primes

#puts (2..2_000_000).inject([]){|a,b|c=Math.sqrt(b);a.any?{|e|e>=b || b%e==0} ? a : a<<b}.inject(:+)

ps = []
for i in 2..2_000_000
  for e in ps
    if i%e==0
      
    end
  end
end

require 'prime'
Prime.take_while{|x|x<2_000_000}.inject(:+)

<end node> 5P9i0s8y19Z
dt=Text
<node>
11.20
1
11	Largest product in a grid	
152507
 
12	Highly divisible triangular number	
140550
 
13	Large sum	
146767
 
14	Longest Collatz sequence	
145200
 
15	Lattice paths	
120684
 
16	Power digit sum	
148757
 
17	Number letter counts	
98937
 
18	Maximum path sum I	
95924
 
19	Counting Sundays	
88791
 
20	Factorial digit sum

<end node> 5P9i0s8y19Z
dt=Text
<node>
utils
1
# palindrome

def palindrome?(x)

end

# prime?

def primes?(x)
  
end

# primes

def primes(n)
  (2..n).inject([]){|a,b|a.any?{|e|b%e==0} ? a : a<<b}
end

def primes(n)
  (2..n).inject([]){|a,b|c=Math.sqrt(b);a.take_while{|e|e<c}.any?{|e|b%e==0} ? a : a<<b}
end


<end node> 5P9i0s8y19Z
dt=Text
<node>
draft
1
data = <<EOF.gsub("\n","").each_char.map(&:to_i)
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
EOF
y = 0
l = 13
for i in 0...(data.size-l+1)
  x = data[i,l].inject(:*)
  y = x if x>y
end
puts y

(2..100).inject([]){|a,b|c=Math.sqrt(b);a.any?{|e|
p [e,c,b] if e>c
e>c || b%e==0} ? a : a<<b}

<end node> 5P9i0s8y19Z
dt=Text
<node>
link
1

https://projecteuler.net/

https://wiki.haskell.org/Euler_problems

<end node> 5P9i0s8y19Z
